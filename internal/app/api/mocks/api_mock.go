package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i dotTest/internal/app/api.Api -o ./api_mock_test.go

import (
	"context"
	"dotTest/internal/db"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ApiMock implements Api
type ApiMock struct {
	t minimock.Tester

	funcAddRule          func(ctx context.Context, site string, node string) (err error)
	inspectFuncAddRule   func(ctx context.Context, site string, node string)
	afterAddRuleCounter  uint64
	beforeAddRuleCounter uint64
	AddRuleMock          mApiMockAddRule

	funcGetNews          func(ctx context.Context, filter string) (opa1 []*db.OneNews, err error)
	inspectFuncGetNews   func(ctx context.Context, filter string)
	afterGetNewsCounter  uint64
	beforeGetNewsCounter uint64
	GetNewsMock          mApiMockGetNews
}

// NewApiMock returns a mock for Api
func NewApiMock(t minimock.Tester) *ApiMock {
	m := &ApiMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddRuleMock = mApiMockAddRule{mock: m}
	m.AddRuleMock.callArgs = []*ApiMockAddRuleParams{}

	m.GetNewsMock = mApiMockGetNews{mock: m}
	m.GetNewsMock.callArgs = []*ApiMockGetNewsParams{}

	return m
}

type mApiMockAddRule struct {
	mock               *ApiMock
	defaultExpectation *ApiMockAddRuleExpectation
	expectations       []*ApiMockAddRuleExpectation

	callArgs []*ApiMockAddRuleParams
	mutex    sync.RWMutex
}

// ApiMockAddRuleExpectation specifies expectation struct of the Api.AddRule
type ApiMockAddRuleExpectation struct {
	mock    *ApiMock
	params  *ApiMockAddRuleParams
	results *ApiMockAddRuleResults
	Counter uint64
}

// ApiMockAddRuleParams contains parameters of the Api.AddRule
type ApiMockAddRuleParams struct {
	ctx  context.Context
	site string
	node string
}

// ApiMockAddRuleResults contains results of the Api.AddRule
type ApiMockAddRuleResults struct {
	err error
}

// Expect sets up expected params for Api.AddRule
func (mmAddRule *mApiMockAddRule) Expect(ctx context.Context, site string, node string) *mApiMockAddRule {
	if mmAddRule.mock.funcAddRule != nil {
		mmAddRule.mock.t.Fatalf("ApiMock.AddRule mock is already set by Set")
	}

	if mmAddRule.defaultExpectation == nil {
		mmAddRule.defaultExpectation = &ApiMockAddRuleExpectation{}
	}

	mmAddRule.defaultExpectation.params = &ApiMockAddRuleParams{ctx, site, node}
	for _, e := range mmAddRule.expectations {
		if minimock.Equal(e.params, mmAddRule.defaultExpectation.params) {
			mmAddRule.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddRule.defaultExpectation.params)
		}
	}

	return mmAddRule
}

// Inspect accepts an inspector function that has same arguments as the Api.AddRule
func (mmAddRule *mApiMockAddRule) Inspect(f func(ctx context.Context, site string, node string)) *mApiMockAddRule {
	if mmAddRule.mock.inspectFuncAddRule != nil {
		mmAddRule.mock.t.Fatalf("Inspect function is already set for ApiMock.AddRule")
	}

	mmAddRule.mock.inspectFuncAddRule = f

	return mmAddRule
}

// Return sets up results that will be returned by Api.AddRule
func (mmAddRule *mApiMockAddRule) Return(err error) *ApiMock {
	if mmAddRule.mock.funcAddRule != nil {
		mmAddRule.mock.t.Fatalf("ApiMock.AddRule mock is already set by Set")
	}

	if mmAddRule.defaultExpectation == nil {
		mmAddRule.defaultExpectation = &ApiMockAddRuleExpectation{mock: mmAddRule.mock}
	}
	mmAddRule.defaultExpectation.results = &ApiMockAddRuleResults{err}
	return mmAddRule.mock
}

//Set uses given function f to mock the Api.AddRule method
func (mmAddRule *mApiMockAddRule) Set(f func(ctx context.Context, site string, node string) (err error)) *ApiMock {
	if mmAddRule.defaultExpectation != nil {
		mmAddRule.mock.t.Fatalf("Default expectation is already set for the Api.AddRule method")
	}

	if len(mmAddRule.expectations) > 0 {
		mmAddRule.mock.t.Fatalf("Some expectations are already set for the Api.AddRule method")
	}

	mmAddRule.mock.funcAddRule = f
	return mmAddRule.mock
}

// When sets expectation for the Api.AddRule which will trigger the result defined by the following
// Then helper
func (mmAddRule *mApiMockAddRule) When(ctx context.Context, site string, node string) *ApiMockAddRuleExpectation {
	if mmAddRule.mock.funcAddRule != nil {
		mmAddRule.mock.t.Fatalf("ApiMock.AddRule mock is already set by Set")
	}

	expectation := &ApiMockAddRuleExpectation{
		mock:   mmAddRule.mock,
		params: &ApiMockAddRuleParams{ctx, site, node},
	}
	mmAddRule.expectations = append(mmAddRule.expectations, expectation)
	return expectation
}

// Then sets up Api.AddRule return parameters for the expectation previously defined by the When method
func (e *ApiMockAddRuleExpectation) Then(err error) *ApiMock {
	e.results = &ApiMockAddRuleResults{err}
	return e.mock
}

// AddRule implements Api
func (mmAddRule *ApiMock) AddRule(ctx context.Context, site string, node string) (err error) {
	mm_atomic.AddUint64(&mmAddRule.beforeAddRuleCounter, 1)
	defer mm_atomic.AddUint64(&mmAddRule.afterAddRuleCounter, 1)

	if mmAddRule.inspectFuncAddRule != nil {
		mmAddRule.inspectFuncAddRule(ctx, site, node)
	}

	mm_params := &ApiMockAddRuleParams{ctx, site, node}

	// Record call args
	mmAddRule.AddRuleMock.mutex.Lock()
	mmAddRule.AddRuleMock.callArgs = append(mmAddRule.AddRuleMock.callArgs, mm_params)
	mmAddRule.AddRuleMock.mutex.Unlock()

	for _, e := range mmAddRule.AddRuleMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddRule.AddRuleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddRule.AddRuleMock.defaultExpectation.Counter, 1)
		mm_want := mmAddRule.AddRuleMock.defaultExpectation.params
		mm_got := ApiMockAddRuleParams{ctx, site, node}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddRule.t.Errorf("ApiMock.AddRule got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddRule.AddRuleMock.defaultExpectation.results
		if mm_results == nil {
			mmAddRule.t.Fatal("No results are set for the ApiMock.AddRule")
		}
		return (*mm_results).err
	}
	if mmAddRule.funcAddRule != nil {
		return mmAddRule.funcAddRule(ctx, site, node)
	}
	mmAddRule.t.Fatalf("Unexpected call to ApiMock.AddRule. %v %v %v", ctx, site, node)
	return
}

// AddRuleAfterCounter returns a count of finished ApiMock.AddRule invocations
func (mmAddRule *ApiMock) AddRuleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddRule.afterAddRuleCounter)
}

// AddRuleBeforeCounter returns a count of ApiMock.AddRule invocations
func (mmAddRule *ApiMock) AddRuleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddRule.beforeAddRuleCounter)
}

// Calls returns a list of arguments used in each call to ApiMock.AddRule.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddRule *mApiMockAddRule) Calls() []*ApiMockAddRuleParams {
	mmAddRule.mutex.RLock()

	argCopy := make([]*ApiMockAddRuleParams, len(mmAddRule.callArgs))
	copy(argCopy, mmAddRule.callArgs)

	mmAddRule.mutex.RUnlock()

	return argCopy
}

// MinimockAddRuleDone returns true if the count of the AddRule invocations corresponds
// the number of defined expectations
func (m *ApiMock) MinimockAddRuleDone() bool {
	for _, e := range m.AddRuleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddRuleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddRuleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddRule != nil && mm_atomic.LoadUint64(&m.afterAddRuleCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddRuleInspect logs each unmet expectation
func (m *ApiMock) MinimockAddRuleInspect() {
	for _, e := range m.AddRuleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ApiMock.AddRule with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddRuleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddRuleCounter) < 1 {
		if m.AddRuleMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ApiMock.AddRule")
		} else {
			m.t.Errorf("Expected call to ApiMock.AddRule with params: %#v", *m.AddRuleMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddRule != nil && mm_atomic.LoadUint64(&m.afterAddRuleCounter) < 1 {
		m.t.Error("Expected call to ApiMock.AddRule")
	}
}

type mApiMockGetNews struct {
	mock               *ApiMock
	defaultExpectation *ApiMockGetNewsExpectation
	expectations       []*ApiMockGetNewsExpectation

	callArgs []*ApiMockGetNewsParams
	mutex    sync.RWMutex
}

// ApiMockGetNewsExpectation specifies expectation struct of the Api.GetNews
type ApiMockGetNewsExpectation struct {
	mock    *ApiMock
	params  *ApiMockGetNewsParams
	results *ApiMockGetNewsResults
	Counter uint64
}

// ApiMockGetNewsParams contains parameters of the Api.GetNews
type ApiMockGetNewsParams struct {
	ctx    context.Context
	filter string
}

// ApiMockGetNewsResults contains results of the Api.GetNews
type ApiMockGetNewsResults struct {
	opa1 []*db.OneNews
	err  error
}

// Expect sets up expected params for Api.GetNews
func (mmGetNews *mApiMockGetNews) Expect(ctx context.Context, filter string) *mApiMockGetNews {
	if mmGetNews.mock.funcGetNews != nil {
		mmGetNews.mock.t.Fatalf("ApiMock.GetNews mock is already set by Set")
	}

	if mmGetNews.defaultExpectation == nil {
		mmGetNews.defaultExpectation = &ApiMockGetNewsExpectation{}
	}

	mmGetNews.defaultExpectation.params = &ApiMockGetNewsParams{ctx, filter}
	for _, e := range mmGetNews.expectations {
		if minimock.Equal(e.params, mmGetNews.defaultExpectation.params) {
			mmGetNews.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetNews.defaultExpectation.params)
		}
	}

	return mmGetNews
}

// Inspect accepts an inspector function that has same arguments as the Api.GetNews
func (mmGetNews *mApiMockGetNews) Inspect(f func(ctx context.Context, filter string)) *mApiMockGetNews {
	if mmGetNews.mock.inspectFuncGetNews != nil {
		mmGetNews.mock.t.Fatalf("Inspect function is already set for ApiMock.GetNews")
	}

	mmGetNews.mock.inspectFuncGetNews = f

	return mmGetNews
}

// Return sets up results that will be returned by Api.GetNews
func (mmGetNews *mApiMockGetNews) Return(opa1 []*db.OneNews, err error) *ApiMock {
	if mmGetNews.mock.funcGetNews != nil {
		mmGetNews.mock.t.Fatalf("ApiMock.GetNews mock is already set by Set")
	}

	if mmGetNews.defaultExpectation == nil {
		mmGetNews.defaultExpectation = &ApiMockGetNewsExpectation{mock: mmGetNews.mock}
	}
	mmGetNews.defaultExpectation.results = &ApiMockGetNewsResults{opa1, err}
	return mmGetNews.mock
}

//Set uses given function f to mock the Api.GetNews method
func (mmGetNews *mApiMockGetNews) Set(f func(ctx context.Context, filter string) (opa1 []*db.OneNews, err error)) *ApiMock {
	if mmGetNews.defaultExpectation != nil {
		mmGetNews.mock.t.Fatalf("Default expectation is already set for the Api.GetNews method")
	}

	if len(mmGetNews.expectations) > 0 {
		mmGetNews.mock.t.Fatalf("Some expectations are already set for the Api.GetNews method")
	}

	mmGetNews.mock.funcGetNews = f
	return mmGetNews.mock
}

// When sets expectation for the Api.GetNews which will trigger the result defined by the following
// Then helper
func (mmGetNews *mApiMockGetNews) When(ctx context.Context, filter string) *ApiMockGetNewsExpectation {
	if mmGetNews.mock.funcGetNews != nil {
		mmGetNews.mock.t.Fatalf("ApiMock.GetNews mock is already set by Set")
	}

	expectation := &ApiMockGetNewsExpectation{
		mock:   mmGetNews.mock,
		params: &ApiMockGetNewsParams{ctx, filter},
	}
	mmGetNews.expectations = append(mmGetNews.expectations, expectation)
	return expectation
}

// Then sets up Api.GetNews return parameters for the expectation previously defined by the When method
func (e *ApiMockGetNewsExpectation) Then(opa1 []*db.OneNews, err error) *ApiMock {
	e.results = &ApiMockGetNewsResults{opa1, err}
	return e.mock
}

// GetNews implements Api
func (mmGetNews *ApiMock) GetNews(ctx context.Context, filter string) (opa1 []*db.OneNews, err error) {
	mm_atomic.AddUint64(&mmGetNews.beforeGetNewsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetNews.afterGetNewsCounter, 1)

	if mmGetNews.inspectFuncGetNews != nil {
		mmGetNews.inspectFuncGetNews(ctx, filter)
	}

	mm_params := &ApiMockGetNewsParams{ctx, filter}

	// Record call args
	mmGetNews.GetNewsMock.mutex.Lock()
	mmGetNews.GetNewsMock.callArgs = append(mmGetNews.GetNewsMock.callArgs, mm_params)
	mmGetNews.GetNewsMock.mutex.Unlock()

	for _, e := range mmGetNews.GetNewsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.opa1, e.results.err
		}
	}

	if mmGetNews.GetNewsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetNews.GetNewsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetNews.GetNewsMock.defaultExpectation.params
		mm_got := ApiMockGetNewsParams{ctx, filter}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetNews.t.Errorf("ApiMock.GetNews got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetNews.GetNewsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetNews.t.Fatal("No results are set for the ApiMock.GetNews")
		}
		return (*mm_results).opa1, (*mm_results).err
	}
	if mmGetNews.funcGetNews != nil {
		return mmGetNews.funcGetNews(ctx, filter)
	}
	mmGetNews.t.Fatalf("Unexpected call to ApiMock.GetNews. %v %v", ctx, filter)
	return
}

// GetNewsAfterCounter returns a count of finished ApiMock.GetNews invocations
func (mmGetNews *ApiMock) GetNewsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNews.afterGetNewsCounter)
}

// GetNewsBeforeCounter returns a count of ApiMock.GetNews invocations
func (mmGetNews *ApiMock) GetNewsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNews.beforeGetNewsCounter)
}

// Calls returns a list of arguments used in each call to ApiMock.GetNews.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetNews *mApiMockGetNews) Calls() []*ApiMockGetNewsParams {
	mmGetNews.mutex.RLock()

	argCopy := make([]*ApiMockGetNewsParams, len(mmGetNews.callArgs))
	copy(argCopy, mmGetNews.callArgs)

	mmGetNews.mutex.RUnlock()

	return argCopy
}

// MinimockGetNewsDone returns true if the count of the GetNews invocations corresponds
// the number of defined expectations
func (m *ApiMock) MinimockGetNewsDone() bool {
	for _, e := range m.GetNewsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNewsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNewsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNews != nil && mm_atomic.LoadUint64(&m.afterGetNewsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetNewsInspect logs each unmet expectation
func (m *ApiMock) MinimockGetNewsInspect() {
	for _, e := range m.GetNewsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ApiMock.GetNews with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNewsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNewsCounter) < 1 {
		if m.GetNewsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ApiMock.GetNews")
		} else {
			m.t.Errorf("Expected call to ApiMock.GetNews with params: %#v", *m.GetNewsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNews != nil && mm_atomic.LoadUint64(&m.afterGetNewsCounter) < 1 {
		m.t.Error("Expected call to ApiMock.GetNews")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ApiMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddRuleInspect()

		m.MinimockGetNewsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ApiMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ApiMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddRuleDone() &&
		m.MinimockGetNewsDone()
}
